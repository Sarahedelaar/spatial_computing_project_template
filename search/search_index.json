{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Spatial Computing Project \"Slime Mold\" Design Challenge The objective is to design a housing complex incorporating several communal/public facilities for a cooperative live-work-play association. The housing complex is to accommodate students, young graduates (starters), and elderly. The complex also provides communal/public facilities, almost as a collective. Location: Rotterdam, the block between Vijverhofstraat, Zomerhofstraat, Schoterbosstraat, and Teilingerstraat (see Figure 1). The location is split into compulsory and optional development, . The part that is to be changed is the big multi-functional building, but if required, the old railway line, football park, restaurant and green park in the light green areas can be incorporated as well. If the design is extended into the optional parts, any streets or pathways crossing this region should be integrated into the design, without losing their original function. Location Location showing optional building plot The program of requirements lists the spaces below: Housing: Student Housing 80 units Assisted Living 30 units Starter Housing 100 units Communal Spaces: Underground Parking (minimum of 0.5 parking lots per apartment) Vegetation (minimum 30% of the plot) Workshops/Fab-Labs/Co-working Space and Start-up Offices Library + Cinematheque + Caf\u00e9/Pub + [pinball] Arcade Co-cooking/Restaurant Community Centre Shop (grocery, tools and crafts) [electricity producing/odourless /geek-friendly] Gym Design Goals (quantitative & qualitative): Maximum Multi-scale Modularity (Qualitative) Excellent Ergonomics (Qualitative) Keeping at least the same amount of housing units as before (Quantitative) Not blocking direct light for neighbour buildings (Quantitative) Max solar gain potential (optional, Quantitative) Max greenery (Quantitative) Min noise (Quantitative) Social integration (Qualitative) Rational spectra of privacy and community (Qualitative)","title":"Home"},{"location":"#spatial-computing-project-slime-mold","text":"","title":"Spatial Computing Project \"Slime Mold\""},{"location":"#design-challenge","text":"The objective is to design a housing complex incorporating several communal/public facilities for a cooperative live-work-play association. The housing complex is to accommodate students, young graduates (starters), and elderly. The complex also provides communal/public facilities, almost as a collective. Location: Rotterdam, the block between Vijverhofstraat, Zomerhofstraat, Schoterbosstraat, and Teilingerstraat (see Figure 1). The location is split into compulsory and optional development, . The part that is to be changed is the big multi-functional building, but if required, the old railway line, football park, restaurant and green park in the light green areas can be incorporated as well. If the design is extended into the optional parts, any streets or pathways crossing this region should be integrated into the design, without losing their original function.","title":"Design Challenge"},{"location":"#location","text":"Location showing optional building plot The program of requirements lists the spaces below: Housing: Student Housing 80 units Assisted Living 30 units Starter Housing 100 units Communal Spaces: Underground Parking (minimum of 0.5 parking lots per apartment) Vegetation (minimum 30% of the plot) Workshops/Fab-Labs/Co-working Space and Start-up Offices Library + Cinematheque + Caf\u00e9/Pub + [pinball] Arcade Co-cooking/Restaurant Community Centre Shop (grocery, tools and crafts) [electricity producing/odourless /geek-friendly] Gym Design Goals (quantitative & qualitative): Maximum Multi-scale Modularity (Qualitative) Excellent Ergonomics (Qualitative) Keeping at least the same amount of housing units as before (Quantitative) Not blocking direct light for neighbour buildings (Quantitative) Max solar gain potential (optional, Quantitative) Max greenery (Quantitative) Min noise (Quantitative) Social integration (Qualitative) Rational spectra of privacy and community (Qualitative)","title":"Location"},{"location":"a1_planning/","text":"Planning Here you should include the process and product of your 1st activity: Planning Title Planning (process): Programme of Requirements & Network (product) Objective Formulate the design problems, form a programme of requirements, form a network, formulate your design principles and the idea (spatial sequences/experience/stories visible in a network). Procedure Describe the hierarchy of design decisions, formulate design goals, define design principles, identify stages in the design process that could be supported by algorithms, draw a flowchart to reflect on these steps and their connections and update it every week. Develop a programme of requirements, an idea (encapsulating the added value of the building and what is going to be unique about it in terms of human experiences) and a corresponding network indicating the main trips inside the building to be facilitated by direct connections matching with the scenarios envisaged in the idea. Formulate the design principles indicating what is a good shape for the building given operational, climatic, or structural aspects.","title":"Planning"},{"location":"a1_planning/#planning","text":"Here you should include the process and product of your 1st activity: Planning Title Planning (process): Programme of Requirements & Network (product) Objective Formulate the design problems, form a programme of requirements, form a network, formulate your design principles and the idea (spatial sequences/experience/stories visible in a network). Procedure Describe the hierarchy of design decisions, formulate design goals, define design principles, identify stages in the design process that could be supported by algorithms, draw a flowchart to reflect on these steps and their connections and update it every week. Develop a programme of requirements, an idea (encapsulating the added value of the building and what is going to be unique about it in terms of human experiences) and a corresponding network indicating the main trips inside the building to be facilitated by direct connections matching with the scenarios envisaged in the idea. Formulate the design principles indicating what is a good shape for the building given operational, climatic, or structural aspects.","title":"Planning"},{"location":"a2_configuring/","text":"Configuring Here you should include the process and product of your 2nd activity: Configuring Title Configuring (process): Circulation Manifold (product) Objective Formulate a spatial (topological) concept, design a modular circulation manifold on a pixel/voxel grid. Procedure Construct a voxelated model of the site with a maximum height of 100 meters. Orient the voxel grid to a global coordinate system (e.g. geographical North-East-West-South). Size the voxels carefully based on the modular height of steps and the length of stair flights and ramps so that they fit in X/Y directions into multiple pixels. Choose the Z size of voxels according to step risers and choose the same size for X and Y as a whole multiple of step threads. There are three types of spaces in terms of pedestrian movement in buildings, metaphorically speaking, spaces to walk through (e.g. corridors, ramps, and stairs), spaces to stand on (e.g. platforms connecting doors to corridors and stairs) and spaces to sit on (functional rooms/spaces). Construct a simplified mesh model of all bridges (corridors, ramps, stairs) connected by standing platforms in a modular grid of voxels/pixels. Take into account the free-height necessary for all spaces and pack them into the bounding volume of the building. For every functional space, leave a single pixel as a standing platform and colour it with the corresponding colour.","title":"Configuring"},{"location":"a2_configuring/#configuring","text":"Here you should include the process and product of your 2nd activity: Configuring Title Configuring (process): Circulation Manifold (product) Objective Formulate a spatial (topological) concept, design a modular circulation manifold on a pixel/voxel grid. Procedure Construct a voxelated model of the site with a maximum height of 100 meters. Orient the voxel grid to a global coordinate system (e.g. geographical North-East-West-South). Size the voxels carefully based on the modular height of steps and the length of stair flights and ramps so that they fit in X/Y directions into multiple pixels. Choose the Z size of voxels according to step risers and choose the same size for X and Y as a whole multiple of step threads. There are three types of spaces in terms of pedestrian movement in buildings, metaphorically speaking, spaces to walk through (e.g. corridors, ramps, and stairs), spaces to stand on (e.g. platforms connecting doors to corridors and stairs) and spaces to sit on (functional rooms/spaces). Construct a simplified mesh model of all bridges (corridors, ramps, stairs) connected by standing platforms in a modular grid of voxels/pixels. Take into account the free-height necessary for all spaces and pack them into the bounding volume of the building. For every functional space, leave a single pixel as a standing platform and colour it with the corresponding colour.","title":"Configuring"},{"location":"a3_massing/","text":"Massing Here you should include the process and product of your 3rd activity: Massing Title Massing (process): Composition (product) Objective Logically place the functional spaces in between bridges within the building envelope. Procedure Compute a Solar Envelope, i.e. an envelope of cuboids/voxels, some of which are removed because they are in the way of the neighbouring buildings receiving some standard/minimum level of direct sunlight. Fit the circulation manifold into the solar envelope. From the standing platforms corresponding to functional spaces, grow them into voxel clouds within your voxelated envelope. Colour the voxel clouds according to their functionalities.","title":"Massing"},{"location":"a3_massing/#massing","text":"Here you should include the process and product of your 3rd activity: Massing Title Massing (process): Composition (product) Objective Logically place the functional spaces in between bridges within the building envelope. Procedure Compute a Solar Envelope, i.e. an envelope of cuboids/voxels, some of which are removed because they are in the way of the neighbouring buildings receiving some standard/minimum level of direct sunlight. Fit the circulation manifold into the solar envelope. From the standing platforms corresponding to functional spaces, grow them into voxel clouds within your voxelated envelope. Colour the voxel clouds according to their functionalities.","title":"Massing"},{"location":"a4_forming/","text":"Forming Here you should include the process and product of your 4th activity: Forming Title Forming (process): Form (product) Objective Document the process and products and provide explanations to ensure reusability of materials. Procedure Finalize the plans and the forms of all functional units. Optionally, choose a way to alter the jaggedness of voxels in the final form by partially bringing in contrasting curvy shapes, for instance as a shell around the building, e.g. through smoothing, relaxation, iso-surfaces, or topological transformation.","title":"Forming"},{"location":"a4_forming/#forming","text":"Here you should include the process and product of your 4th activity: Forming Title Forming (process): Form (product) Objective Document the process and products and provide explanations to ensure reusability of materials. Procedure Finalize the plans and the forms of all functional units. Optionally, choose a way to alter the jaggedness of voxels in the final form by partially bringing in contrasting curvy shapes, for instance as a shell around the building, e.g. through smoothing, relaxation, iso-surfaces, or topological transformation.","title":"Forming"},{"location":"a5_finaldelivery/","text":"Final Deliveries","title":"Final Deliveries"},{"location":"a5_finaldelivery/#final-deliveries","text":"","title":"Final Deliveries"},{"location":"about/","text":"About Name Studentnumber Role Joris Ghobrial Title Diagrammer Youri Stoeller 5107490 Text Glenn Text Puzzle solver Sarah Edelaar 5038405 Puzzle solver Responsible instructor: Ir. P. Nourian (TU Delft, Design Informatics- PZN) Instructors: Ir. Shervin Azadi (TU Delft, Design Informatics - SAZ)","title":"About"},{"location":"about/#about","text":"Name Studentnumber Role Joris Ghobrial Title Diagrammer Youri Stoeller 5107490 Text Glenn Text Puzzle solver Sarah Edelaar 5038405 Puzzle solver Responsible instructor: Ir. P. Nourian (TU Delft, Design Informatics- PZN) Instructors: Ir. Shervin Azadi (TU Delft, Design Informatics - SAZ)","title":"About"},{"location":"Configuring/a2_configuring_process/","text":"Configuring: process Here you should include the process and product of your 2nd activity: Configuring Title Configuring (process): Circulation Manifold (product) Objective Formulate a spatial (topological) concept, design a modular circulation manifold on a pixel/voxel grid. Procedure Construct a voxelated model of the site with a maximum height of 100 meters. Orient the voxel grid to a global coordinate system (e.g. geographical North-East-West-South). Size the voxels carefully based on the modular height of steps and the length of stair flights and ramps so that they fit in X/Y directions into multiple pixels. Choose the Z size of voxels according to step risers and choose the same size for X and Y as a whole multiple of step threads. There are three types of spaces in terms of pedestrian movement in buildings, metaphorically speaking, spaces to walk through (e.g. corridors, ramps, and stairs), spaces to stand on (e.g. platforms connecting doors to corridors and stairs) and spaces to sit on (functional rooms/spaces). Construct a simplified mesh model of all bridges (corridors, ramps, stairs) connected by standing platforms in a modular grid of voxels/pixels. Take into account the free-height necessary for all spaces and pack them into the bounding volume of the building. For every functional space, leave a single pixel as a standing platform and colour it with the corresponding colour. MOET ALLEMAAL NAAR PLANNING PROCES // VOXELIZED ENVELOPE high en low + VOXEL SIZE Program of Requirements In the table below the requirements for every type of space is defined. The amount of housing is set from the start. The table shows the type of space, size in m\u00b2, size per unit (for housing) and the amount of voxels. REL Chart With a set program of requirements, we specified each space\u2019s realtive closeness preferences and certain prefered spatial qualities. Relations between spaces Relations between spaces, ranging from 0-1.","title":"Process"},{"location":"Configuring/a2_configuring_process/#configuring-process","text":"Here you should include the process and product of your 2nd activity: Configuring Title Configuring (process): Circulation Manifold (product) Objective Formulate a spatial (topological) concept, design a modular circulation manifold on a pixel/voxel grid. Procedure Construct a voxelated model of the site with a maximum height of 100 meters. Orient the voxel grid to a global coordinate system (e.g. geographical North-East-West-South). Size the voxels carefully based on the modular height of steps and the length of stair flights and ramps so that they fit in X/Y directions into multiple pixels. Choose the Z size of voxels according to step risers and choose the same size for X and Y as a whole multiple of step threads. There are three types of spaces in terms of pedestrian movement in buildings, metaphorically speaking, spaces to walk through (e.g. corridors, ramps, and stairs), spaces to stand on (e.g. platforms connecting doors to corridors and stairs) and spaces to sit on (functional rooms/spaces). Construct a simplified mesh model of all bridges (corridors, ramps, stairs) connected by standing platforms in a modular grid of voxels/pixels. Take into account the free-height necessary for all spaces and pack them into the bounding volume of the building. For every functional space, leave a single pixel as a standing platform and colour it with the corresponding colour.","title":"Configuring: process"},{"location":"Configuring/a2_configuring_process/#moet-allemaal-naar-planning-proces-voxelized-envelope-high-en-low-voxel-size","text":"","title":"MOET ALLEMAAL NAAR PLANNING PROCES // VOXELIZED ENVELOPE high en low + VOXEL SIZE"},{"location":"Configuring/a2_configuring_process/#program-of-requirements","text":"In the table below the requirements for every type of space is defined. The amount of housing is set from the start. The table shows the type of space, size in m\u00b2, size per unit (for housing) and the amount of voxels.","title":"Program of Requirements"},{"location":"Configuring/a2_configuring_process/#rel-chart","text":"With a set program of requirements, we specified each space\u2019s realtive closeness preferences and certain prefered spatial qualities.","title":"REL Chart"},{"location":"Configuring/a2_configuring_process/#relations-between-spaces","text":"Relations between spaces, ranging from 0-1.","title":"Relations between spaces"},{"location":"Configuring/a2_configuring_product/","text":"Configuring: product MOET ALLEMAAL NAAR PLANNING PROCES // HIGH RES FIELD Distance to For creating a distance field based on walking through the building, we first created two different neigbourhood stencils to work with. The first stencil shows that going one voxel sideways (in x- or y-direction) the value of the neighbours will increment with 1. However, when someone wants to go a level up or down, this costs more energy than walking on the same level. Therefore, the neighbours in the z-direction will increment with the value of 2. Distance to the ground PSEUDO CODE AANPASSEN Distance to Ground Flowchart Distance to Ground Pseudo code 0. Distance to ground field Distance_to_ground_field.py Input : voxelized_envelope . csv ( low and high res ), svf points 1. Import Meshes 2. Import Lattice 3. Initialize vertical adjacency matrix Calculate distances 4. Construct the field Output : Distance to ground field ( low and high res ) Distance to the main entrance PSEUDO CODE NAKIJKEN Distance to Main Entrance Flowchart Distance to Main Entrance Pseudo code 0. Distance to main entrance field Distance_to_main_entrance_field.py Input : voxelized_envelope . csv ( low and high res ), points of main street and public transport 1. Import Meshes 2. Import Lattice 3. Compute from each voxel the average distance to the main street and public transport Choose the voxel with the minimum distance as the main entrance Retrieve the neighbour voxels of the main entrance Set the value of the horizontal neighbours to 1 and the vertical neighbours to 2 For each neighbour : Find the neighbours and add 1 ( horizontal ) or 2 ( vertical ) to it \u2019 s value , when it does not have a value yet Convert the values into values between 0 and 1 4. Construct the field Output : Distance to main entrance field ( low and high res ) Noise FLOWCHART UPDATEN Noise Flowchart Noise Pseudo code 0. Noise field Noise_field.py Input : voxelized_envelope . csv ( low and high res ), noise source points , context mesh 1. Import Meshes 2. Import Lattice 3. For each noise source point : Assign a value corresponding with the amount of noise from that point For each voxel : Compute the distance to the noise source points Multiply the distance by the value of the noise source point Convert the values into values between 0 and 1 ( 0 = most noise , 1 = no noise ) 4. Construct the field Output : noise field ( low and high res ) Sun Accessibility Sun Accessibility Sun Access Flowchart Sun Access Pseudo code 0. Sun access field Sun_access_field.py Input : voxelized_envelope . csv ( low and high res ), context mesh 1. Import Meshes 2. Import Lattice 3. Import Sun Vectors import Sunpath ( ladybug ) 4. Compute Intersection Create list of all vectors pointing towards the sun locations over the year For all voxels centers : o Compute rays towards all the sun points o If ray hits the context , skip that ray o Else store the ray Calculate the percentage of time each voxel sees the sun Convert the values into values between 0 and 1 ( 0 = no sun , 1 = much sun ) 5. Construct the field Output : sun access field ( low and high res ) Shadow Casting PSEUDO, FLOWCHART EN HIGHRES UPDATEN Shadow Casting Flowchart Shadow Casting Pseudo code 0. Shadow field Shadow_field.py Input : voxelized_envelope . csv ( low and high res ), context mesh 1. Import Meshes 2. Import Lattice 3. Import Sun Vectors import Sunpath ( ladybug ) ???? 4. Compute Intersection Create list of all vectors pointing towards the sun locations over the year For all voxels centers : o Compute rays towards all the sun points o If ray hits the context , skip that ray o Else store the ray Calculate the percentage of time each voxel sees the sun Convert the values into values between 0 and 1 ( 0 = no sun , 1 = much sun ) 5. Construct the field Output : shadow field ( low and high res ) Sky View Factor PSEUDO AFMAKEN View on Greenery Flowchart SVF Pseudo code 0. Sky view factor field Sky_view_factor_field.py Input : voxelized_envelope . csv ( low and high res ), context mesh 1. Import Meshes 2. Import Lattice SUNPATH ???? 3. Compute Intersection Create list of all vectors pointing towards the sun locations over the year For all voxels centers : o Compute rays towards all the sun points o If ray hits the context , skip that ray o Else store the ray Calculate the percentage of time each voxel sees the sun Convert the values into values between 0 and 1 ( 0 = no sun , 1 = much sun ) 4. Construct the field Output : sky view factor field ( low and high res ) View on Greenery TEST.... View on Greenery Flowchart View on Green Pseudo code 0. View on Green field View_on_green_field.py Input : voxelized_envelope . csv ( low and high res ), green points , context mesh 1. Import Meshes 2. Import Lattice 3. Compute rays from green points to the center of the voxels For each ray the distance and intersection is calculated The outcome is reshaped Convert the values into values between 0 and 1 Construct the view on greenery field 4. Construct the field Output : view on greenery field ( low and high res )","title":"Product"},{"location":"Configuring/a2_configuring_product/#configuring-product","text":"","title":"Configuring: product"},{"location":"Configuring/a2_configuring_product/#moet-allemaal-naar-planning-proces-high-res-field","text":"","title":"MOET ALLEMAAL NAAR PLANNING PROCES // HIGH RES FIELD"},{"location":"Configuring/a2_configuring_product/#distance-to","text":"For creating a distance field based on walking through the building, we first created two different neigbourhood stencils to work with. The first stencil shows that going one voxel sideways (in x- or y-direction) the value of the neighbours will increment with 1. However, when someone wants to go a level up or down, this costs more energy than walking on the same level. Therefore, the neighbours in the z-direction will increment with the value of 2.","title":"Distance to"},{"location":"Configuring/a2_configuring_product/#distance-to-the-ground","text":"PSEUDO CODE AANPASSEN Distance to Ground Flowchart Distance to Ground Pseudo code 0. Distance to ground field Distance_to_ground_field.py Input : voxelized_envelope . csv ( low and high res ), svf points 1. Import Meshes 2. Import Lattice 3. Initialize vertical adjacency matrix Calculate distances 4. Construct the field Output : Distance to ground field ( low and high res )","title":"Distance to the ground"},{"location":"Configuring/a2_configuring_product/#distance-to-the-main-entrance","text":"PSEUDO CODE NAKIJKEN Distance to Main Entrance Flowchart Distance to Main Entrance Pseudo code 0. Distance to main entrance field Distance_to_main_entrance_field.py Input : voxelized_envelope . csv ( low and high res ), points of main street and public transport 1. Import Meshes 2. Import Lattice 3. Compute from each voxel the average distance to the main street and public transport Choose the voxel with the minimum distance as the main entrance Retrieve the neighbour voxels of the main entrance Set the value of the horizontal neighbours to 1 and the vertical neighbours to 2 For each neighbour : Find the neighbours and add 1 ( horizontal ) or 2 ( vertical ) to it \u2019 s value , when it does not have a value yet Convert the values into values between 0 and 1 4. Construct the field Output : Distance to main entrance field ( low and high res )","title":"Distance to the main entrance"},{"location":"Configuring/a2_configuring_product/#noise","text":"FLOWCHART UPDATEN Noise Flowchart Noise Pseudo code 0. Noise field Noise_field.py Input : voxelized_envelope . csv ( low and high res ), noise source points , context mesh 1. Import Meshes 2. Import Lattice 3. For each noise source point : Assign a value corresponding with the amount of noise from that point For each voxel : Compute the distance to the noise source points Multiply the distance by the value of the noise source point Convert the values into values between 0 and 1 ( 0 = most noise , 1 = no noise ) 4. Construct the field Output : noise field ( low and high res )","title":"Noise"},{"location":"Configuring/a2_configuring_product/#sun-accessibility","text":"Sun Accessibility Sun Access Flowchart Sun Access Pseudo code 0. Sun access field Sun_access_field.py Input : voxelized_envelope . csv ( low and high res ), context mesh 1. Import Meshes 2. Import Lattice 3. Import Sun Vectors import Sunpath ( ladybug ) 4. Compute Intersection Create list of all vectors pointing towards the sun locations over the year For all voxels centers : o Compute rays towards all the sun points o If ray hits the context , skip that ray o Else store the ray Calculate the percentage of time each voxel sees the sun Convert the values into values between 0 and 1 ( 0 = no sun , 1 = much sun ) 5. Construct the field Output : sun access field ( low and high res )","title":"Sun Accessibility"},{"location":"Configuring/a2_configuring_product/#shadow-casting","text":"PSEUDO, FLOWCHART EN HIGHRES UPDATEN Shadow Casting Flowchart Shadow Casting Pseudo code 0. Shadow field Shadow_field.py Input : voxelized_envelope . csv ( low and high res ), context mesh 1. Import Meshes 2. Import Lattice 3. Import Sun Vectors import Sunpath ( ladybug ) ???? 4. Compute Intersection Create list of all vectors pointing towards the sun locations over the year For all voxels centers : o Compute rays towards all the sun points o If ray hits the context , skip that ray o Else store the ray Calculate the percentage of time each voxel sees the sun Convert the values into values between 0 and 1 ( 0 = no sun , 1 = much sun ) 5. Construct the field Output : shadow field ( low and high res )","title":"Shadow Casting"},{"location":"Configuring/a2_configuring_product/#sky-view-factor","text":"PSEUDO AFMAKEN View on Greenery Flowchart SVF Pseudo code 0. Sky view factor field Sky_view_factor_field.py Input : voxelized_envelope . csv ( low and high res ), context mesh 1. Import Meshes 2. Import Lattice SUNPATH ???? 3. Compute Intersection Create list of all vectors pointing towards the sun locations over the year For all voxels centers : o Compute rays towards all the sun points o If ray hits the context , skip that ray o Else store the ray Calculate the percentage of time each voxel sees the sun Convert the values into values between 0 and 1 ( 0 = no sun , 1 = much sun ) 4. Construct the field Output : sky view factor field ( low and high res )","title":"Sky View Factor"},{"location":"Configuring/a2_configuring_product/#view-on-greenery","text":"TEST.... View on Greenery Flowchart View on Green Pseudo code 0. View on Green field View_on_green_field.py Input : voxelized_envelope . csv ( low and high res ), green points , context mesh 1. Import Meshes 2. Import Lattice 3. Compute rays from green points to the center of the voxels For each ray the distance and intersection is calculated The outcome is reshaped Convert the values into values between 0 and 1 Construct the view on greenery field 4. Construct the field Output : view on greenery field ( low and high res )","title":"View on Greenery"},{"location":"Final_Deliveries/bibliography/","text":"Bibliography Here you should cite all references and materials that you have used in your project. This is in addition to citation in the documentation itself.","title":"Bibliography"},{"location":"Final_Deliveries/bibliography/#bibliography","text":"Here you should cite all references and materials that you have used in your project. This is in addition to citation in the documentation itself.","title":"Bibliography"},{"location":"Final_Deliveries/figures/","text":"Figures Here you should include all of your figures and links to the pages that they have been used in. You can embed your only videos like this:","title":"Figures"},{"location":"Final_Deliveries/figures/#figures","text":"Here you should include all of your figures and links to the pages that they have been used in. You can embed your only videos like this:","title":"Figures"},{"location":"Final_Deliveries/presentations/","text":"Presentations Here you should embed your poster and presentations. Here is an example:","title":"Presentations"},{"location":"Final_Deliveries/presentations/#presentations","text":"Here you should embed your poster and presentations. Here is an example:","title":"Presentations"},{"location":"Final_Deliveries/scripts/","text":"Scripts Here you should include all of your scripts whether they are text, python notebook or procedural scripts. You should also include link to the link to relevant location in the main pages, description, explanatory materials such as pseudo code or flowcharts, and visualizations if it is applicable. If necessary this page can be broken down to multiple pages. Here is an example of how to include your scripts: 0. Initialization TEST initialization.py 1 2 3 4 5 import os import topogenesis as tg import pyvista as pv import trimesh as tm import numpy as np 1. Input 1 2 3 4 #setting the specified voxel size BLA BLA mesh_path = os . path . relpath ( '../data/voxelized_envelope_extended.obj' ) 2. Voxelize Mesh 1 2 3 4 #setting the specified voxel size BLA BLA mesh_path = os . path . relpath ( '../data/voxelized_envelope_extended.obj' )","title":"Scripts"},{"location":"Final_Deliveries/scripts/#scripts","text":"Here you should include all of your scripts whether they are text, python notebook or procedural scripts. You should also include link to the link to relevant location in the main pages, description, explanatory materials such as pseudo code or flowcharts, and visualizations if it is applicable. If necessary this page can be broken down to multiple pages. Here is an example of how to include your scripts:","title":"Scripts"},{"location":"Final_Deliveries/scripts/#0-initialization-test","text":"initialization.py 1 2 3 4 5 import os import topogenesis as tg import pyvista as pv import trimesh as tm import numpy as np","title":"0. Initialization TEST"},{"location":"Final_Deliveries/scripts/#1-input","text":"1 2 3 4 #setting the specified voxel size BLA BLA mesh_path = os . path . relpath ( '../data/voxelized_envelope_extended.obj' )","title":"1. Input"},{"location":"Final_Deliveries/scripts/#2-voxelize-mesh","text":"1 2 3 4 #setting the specified voxel size BLA BLA mesh_path = os . path . relpath ( '../data/voxelized_envelope_extended.obj' )","title":"2. Voxelize Mesh"},{"location":"Forming/a4_forming_process/","text":"Forming: process Here you should include the process and product of your 4th activity: Forming Title Forming (process): Form (product) Objective Document the process and products and provide explanations to ensure reusability of materials. Procedure Finalize the plans and the forms of all functional units. Optionally, choose a way to alter the jaggedness of voxels in the final form by partially bringing in contrasting curvy shapes, for instance as a shell around the building, e.g. through smoothing, relaxation, iso-surfaces, or topological transformation. ARCH Creating the tiles TEST.... Decision Tree Floorplan Generator Creating the tiles TEST.... TEST Pseudo code 0. Import initialization.py 1 2 3 4 5 import os import topogenesis as tg import pyvista as pv import trimesh as tm import numpy as np 1. TEST initialization.py 1 2 3 4 5 import os import topogenesis as tg import pyvista as pv import trimesh as tm import numpy as np","title":"Process"},{"location":"Forming/a4_forming_process/#forming-process","text":"Here you should include the process and product of your 4th activity: Forming Title Forming (process): Form (product) Objective Document the process and products and provide explanations to ensure reusability of materials. Procedure Finalize the plans and the forms of all functional units. Optionally, choose a way to alter the jaggedness of voxels in the final form by partially bringing in contrasting curvy shapes, for instance as a shell around the building, e.g. through smoothing, relaxation, iso-surfaces, or topological transformation.","title":"Forming: process"},{"location":"Forming/a4_forming_process/#arch","text":"","title":"ARCH"},{"location":"Forming/a4_forming_process/#creating-the-tiles","text":"TEST.... Decision Tree Floorplan Generator","title":"Creating the tiles"},{"location":"Forming/a4_forming_process/#creating-the-tiles_1","text":"TEST.... TEST","title":"Creating the tiles"},{"location":"Forming/a4_forming_process/#pseudo-code","text":"","title":"Pseudo code"},{"location":"Forming/a4_forming_process/#0-import","text":"initialization.py 1 2 3 4 5 import os import topogenesis as tg import pyvista as pv import trimesh as tm import numpy as np","title":"0. Import"},{"location":"Forming/a4_forming_process/#1-test","text":"initialization.py 1 2 3 4 5 import os import topogenesis as tg import pyvista as pv import trimesh as tm import numpy as np","title":"1. TEST"},{"location":"Forming/a4_forming_product/","text":"Forming: product RENDER","title":"Product"},{"location":"Forming/a4_forming_product/#forming-product","text":"","title":"Forming: product"},{"location":"Forming/a4_forming_product/#render","text":"","title":"RENDER"},{"location":"Massing/a3_massing_process/","text":"Massing: process Here you should include the process and product of your 3rd activity: Massing Title Massing (process): Composition (product) Objective Logically place the functional spaces in between bridges within the building envelope. Procedure Compute a Solar Envelope, i.e. an envelope of cuboids/voxels, some of which are removed because they are in the way of the neighbouring buildings receiving some standard/minimum level of direct sunlight. Fit the circulation manifold into the solar envelope. From the standing platforms corresponding to functional spaces, grow them into voxel clouds within your voxelated envelope. Colour the voxel clouds according to their functionalities. VOXELSIZE WEG + FIELDS WEG // INITIALIZATION + ABM SIM Explanation Explanation of the analysis Voxel size The final voxel is 3.6 3.6 3.24 (w d h) meters. With the minivoxel being 0.9 0.9 0.54 (w d h) meters to represent a flight of three stairs. (Fig. 1) Fig. 1 Voxelsize View on Greenery TEST.... View on Greenery Analysis Distance to the ground TEST.... Distance to the main entrance TEST.... Noise TEST.... Sun Accessibility TEST.... Shadow Casting TEST.... Sky View Factor TEST....","title":"Process"},{"location":"Massing/a3_massing_process/#massing-process","text":"Here you should include the process and product of your 3rd activity: Massing Title Massing (process): Composition (product) Objective Logically place the functional spaces in between bridges within the building envelope. Procedure Compute a Solar Envelope, i.e. an envelope of cuboids/voxels, some of which are removed because they are in the way of the neighbouring buildings receiving some standard/minimum level of direct sunlight. Fit the circulation manifold into the solar envelope. From the standing platforms corresponding to functional spaces, grow them into voxel clouds within your voxelated envelope. Colour the voxel clouds according to their functionalities.","title":"Massing: process"},{"location":"Massing/a3_massing_process/#voxelsize-weg-fields-weg-initialization-abm-sim","text":"","title":"VOXELSIZE WEG + FIELDS WEG // INITIALIZATION + ABM SIM"},{"location":"Massing/a3_massing_process/#explanation","text":"Explanation of the analysis","title":"Explanation"},{"location":"Massing/a3_massing_process/#voxel-size","text":"The final voxel is 3.6 3.6 3.24 (w d h) meters. With the minivoxel being 0.9 0.9 0.54 (w d h) meters to represent a flight of three stairs. (Fig. 1) Fig. 1 Voxelsize","title":"Voxel size"},{"location":"Massing/a3_massing_process/#view-on-greenery","text":"TEST.... View on Greenery Analysis","title":"View on Greenery"},{"location":"Massing/a3_massing_process/#distance-to-the-ground","text":"TEST....","title":"Distance to the ground"},{"location":"Massing/a3_massing_process/#distance-to-the-main-entrance","text":"TEST....","title":"Distance to the main entrance"},{"location":"Massing/a3_massing_process/#noise","text":"TEST....","title":"Noise"},{"location":"Massing/a3_massing_process/#sun-accessibility","text":"TEST....","title":"Sun Accessibility"},{"location":"Massing/a3_massing_process/#shadow-casting","text":"TEST....","title":"Shadow Casting"},{"location":"Massing/a3_massing_process/#sky-view-factor","text":"TEST....","title":"Sky View Factor"},{"location":"Massing/a3_massing_product/","text":"Massing: product MOET ALLEMAAL WEG // UITKOMST MASS + GIF + IMGS Seed allocation/initialization? TEST Explanation of allocation/initialization Initialization of the agents TEST Pseudo code 0. Import initialization.py 1 2 3 4 5 import os import topogenesis as tg import pyvista as pv import trimesh as tm import numpy as np 1. TEST initialization.py 1 2 3 4 5 import os import topogenesis as tg import pyvista as pv import trimesh as tm import numpy as np","title":"Product"},{"location":"Massing/a3_massing_product/#massing-product","text":"","title":"Massing: product"},{"location":"Massing/a3_massing_product/#moet-allemaal-weg-uitkomst-mass-gif-imgs","text":"","title":"MOET ALLEMAAL WEG // UITKOMST MASS + GIF + IMGS"},{"location":"Massing/a3_massing_product/#seed-allocationinitialization-test","text":"Explanation of allocation/initialization Initialization of the agents TEST","title":"Seed allocation/initialization? TEST"},{"location":"Massing/a3_massing_product/#pseudo-code","text":"","title":"Pseudo code"},{"location":"Massing/a3_massing_product/#0-import","text":"initialization.py 1 2 3 4 5 import os import topogenesis as tg import pyvista as pv import trimesh as tm import numpy as np","title":"0. Import"},{"location":"Massing/a3_massing_product/#1-test","text":"initialization.py 1 2 3 4 5 import os import topogenesis as tg import pyvista as pv import trimesh as tm import numpy as np","title":"1. TEST"},{"location":"Planning/a1_planning_process/","text":"Planning: process Here you should include the process and product of your 1st activity: Planning Title Planning (process): Programme of Requirements & Network (product) Objective Formulate the design problems, form a programme of requirements, form a network, formulate your design principles and the idea (spatial sequences/experience/stories visible in a network). Procedure Describe the hierarchy of design decisions, formulate design goals, define design principles, identify stages in the design process that could be supported by algorithms, draw a flowchart to reflect on these steps and their connections and update it every week. Develop a programme of requirements, an idea (encapsulating the added value of the building and what is going to be unique about it in terms of human experiences) and a corresponding network indicating the main trips inside the building to be facilitated by direct connections matching with the scenarios envisaged in the idea. Formulate the design principles indicating what is a good shape for the building given operational, climatic, or structural aspects. PVE IMAGES/SKETCHES + ANALYSE Ideas for improvement on the site: Using the existing surrounding structures and creating a new function/environment. (train) Next to the site there is an unused train track. The train track is currently used by restaurants and caf\u00e9s. The train track provides a unique and creative location and is attractive to business owners and new developers. Especially since it's close to the city centre, the location provides a lot of potential. Integrating surrounding wall paintings on the site The area around the site has a lot of different wall paintings. This is something characteristic of Rotterdam, and especially Rotterdam-north. An improvement on the side would be integrating these artistic pieces on the building site and the surrounding area. Keeping current existing businesses onto the site and in the building Currently the building is used by various: restaurants, businesses and foundations. The idea is to keep these businesses on the newly developed site. and integrate them into the new program Expanding and connecting surrounding green structures to create qualitative greenery The area is currently divided into different sections of greenery. The disconnection between the green structures creates a low quality of green. by connecting and expanding the greenery, a more qualitative feel is created. Creating an accessible connection between the building and the surrounding area. By making entrances facing general accessibility points or entrance areas the site becomes more open towards the public Key performance indicators Creating a good living condition which includes: enough daylight in every space reduce sound pollution view on green spaces (certain percentage) public spaces are separated from the private and communal spaces, (in which the public functions are easily accessible form public routes) modules or components can be combined in a flexible way across a system standardized grid size Routing We created different routings for the different target groups of the building; students, starters, elderly and visitors. The first 3 groups have a division in arriving to their homes (external routing) and the routes they take inside the building (internal routing). The routing diagrams also include the approximate times of occurrence per week. This will help weight each connection between the spaces. Students External Internal Starters External Internal Elderly External Internal Visitors","title":"Process"},{"location":"Planning/a1_planning_process/#planning-process","text":"Here you should include the process and product of your 1st activity: Planning Title Planning (process): Programme of Requirements & Network (product) Objective Formulate the design problems, form a programme of requirements, form a network, formulate your design principles and the idea (spatial sequences/experience/stories visible in a network). Procedure Describe the hierarchy of design decisions, formulate design goals, define design principles, identify stages in the design process that could be supported by algorithms, draw a flowchart to reflect on these steps and their connections and update it every week. Develop a programme of requirements, an idea (encapsulating the added value of the building and what is going to be unique about it in terms of human experiences) and a corresponding network indicating the main trips inside the building to be facilitated by direct connections matching with the scenarios envisaged in the idea. Formulate the design principles indicating what is a good shape for the building given operational, climatic, or structural aspects.","title":"Planning: process"},{"location":"Planning/a1_planning_process/#pve-imagessketches-analyse","text":"","title":"PVE IMAGES/SKETCHES + ANALYSE"},{"location":"Planning/a1_planning_process/#ideas-for-improvement-on-the-site","text":"Using the existing surrounding structures and creating a new function/environment. (train) Next to the site there is an unused train track. The train track is currently used by restaurants and caf\u00e9s. The train track provides a unique and creative location and is attractive to business owners and new developers. Especially since it's close to the city centre, the location provides a lot of potential. Integrating surrounding wall paintings on the site The area around the site has a lot of different wall paintings. This is something characteristic of Rotterdam, and especially Rotterdam-north. An improvement on the side would be integrating these artistic pieces on the building site and the surrounding area. Keeping current existing businesses onto the site and in the building Currently the building is used by various: restaurants, businesses and foundations. The idea is to keep these businesses on the newly developed site. and integrate them into the new program Expanding and connecting surrounding green structures to create qualitative greenery The area is currently divided into different sections of greenery. The disconnection between the green structures creates a low quality of green. by connecting and expanding the greenery, a more qualitative feel is created. Creating an accessible connection between the building and the surrounding area. By making entrances facing general accessibility points or entrance areas the site becomes more open towards the public","title":"Ideas for improvement on the site:"},{"location":"Planning/a1_planning_process/#key-performance-indicators","text":"Creating a good living condition which includes: enough daylight in every space reduce sound pollution view on green spaces (certain percentage) public spaces are separated from the private and communal spaces, (in which the public functions are easily accessible form public routes) modules or components can be combined in a flexible way across a system standardized grid size","title":"Key performance indicators"},{"location":"Planning/a1_planning_process/#routing","text":"We created different routings for the different target groups of the building; students, starters, elderly and visitors. The first 3 groups have a division in arriving to their homes (external routing) and the routes they take inside the building (internal routing). The routing diagrams also include the approximate times of occurrence per week. This will help weight each connection between the spaces.","title":"Routing"},{"location":"Planning/a1_planning_process/#students","text":"External Internal","title":"Students"},{"location":"Planning/a1_planning_process/#starters","text":"External Internal","title":"Starters"},{"location":"Planning/a1_planning_process/#elderly","text":"External Internal","title":"Elderly"},{"location":"Planning/a1_planning_process/#visitors","text":"","title":"Visitors"},{"location":"Planning/a1_planning_product/","text":"Planning: product ADJACENCY EN WEIGHTED Metro diagram The first objective of the design was to create a network graph visualizing the main trips inside the building based on our design goals: Adjacency The first objective of the design was to create a network graph visualizing the main trips inside the building based on our design goals: Residential preferences Every group of residents have their own preferences when it comes to housing and the context of it.","title":"Product"},{"location":"Planning/a1_planning_product/#planning-product","text":"","title":"Planning: product"},{"location":"Planning/a1_planning_product/#adjacency-en-weighted","text":"","title":"ADJACENCY EN WEIGHTED"},{"location":"Planning/a1_planning_product/#metro-diagram","text":"The first objective of the design was to create a network graph visualizing the main trips inside the building based on our design goals:","title":"Metro diagram"},{"location":"Planning/a1_planning_product/#adjacency","text":"The first objective of the design was to create a network graph visualizing the main trips inside the building based on our design goals:","title":"Adjacency"},{"location":"Planning/a1_planning_product/#residential-preferences","text":"Every group of residents have their own preferences when it comes to housing and the context of it.","title":"Residential preferences"},{"location":"documenting/folder_structure/","text":"Folder Structure The folders in student projects should strictly follow the structure of the folders in this repository. The main folders are four assignment folder (corresponding to each assignment) and one folder for final deliverables of your project. In general, the process sub-folders include all the necessary code, notebook, files, and models that you have used to achieve the final product of that assignment. It also includes document that represent the process of the assignment such as flowcharts, diagrams and pseudo-codes. The product sub-folder sh Here is run down of the overall structure: A1_Planning Process Product A2_Configuring Process Product A3_Massing Process Product A4_Forming Process Product Final_Deliverables Here you will include all the final deliverables of your project. docs Here you will write and edit the source of your documentation in MarkDown . An example is included in the template to help you begin documenting your project. site you should leave this directory empty. It will be filled by automatic documentation generator MkDocs","title":"Folder Structure"},{"location":"documenting/folder_structure/#folder-structure","text":"The folders in student projects should strictly follow the structure of the folders in this repository. The main folders are four assignment folder (corresponding to each assignment) and one folder for final deliverables of your project. In general, the process sub-folders include all the necessary code, notebook, files, and models that you have used to achieve the final product of that assignment. It also includes document that represent the process of the assignment such as flowcharts, diagrams and pseudo-codes. The product sub-folder sh Here is run down of the overall structure: A1_Planning Process Product A2_Configuring Process Product A3_Massing Process Product A4_Forming Process Product Final_Deliverables Here you will include all the final deliverables of your project. docs Here you will write and edit the source of your documentation in MarkDown . An example is included in the template to help you begin documenting your project. site you should leave this directory empty. It will be filled by automatic documentation generator MkDocs","title":"Folder Structure"},{"location":"documenting/guidelines/","text":"Guidelines File Size : No file bigger than 50mb is recommended. No file bigger than 100mb is allowed. Folder Structure : Do not change the folder structure. You can sub-folders to the existing folders if you want but you shall not change the existing overall structure Duplicates : Do NOT include duplicates in your files. Naming Convention : Avoid using special characters or spaces in file and folder names. Instead, use \"_\" to separate words in the names. Geometric Models (.3dm, .obj, etc) should be compressed before being added to repository. Video and Animation files should not be included the repository. They should be uploaded to online video services (YouTube, Vimeo, etc). You should embed those video link in your documentation. (GIF files are allowed in your repo)","title":"Guidelines"},{"location":"documenting/guidelines/#guidelines","text":"File Size : No file bigger than 50mb is recommended. No file bigger than 100mb is allowed. Folder Structure : Do not change the folder structure. You can sub-folders to the existing folders if you want but you shall not change the existing overall structure Duplicates : Do NOT include duplicates in your files. Naming Convention : Avoid using special characters or spaces in file and folder names. Instead, use \"_\" to separate words in the names. Geometric Models (.3dm, .obj, etc) should be compressed before being added to repository. Video and Animation files should not be included the repository. They should be uploaded to online video services (YouTube, Vimeo, etc). You should embed those video link in your documentation. (GIF files are allowed in your repo)","title":"Guidelines"},{"location":"documenting/instructions/","text":"Documenting Instructions Installation Install Conda You can install Anaconda or Miniconda to install conda package manager (if you don't know the difference you should install anaconda). Create documentation environment Now we need to create the appropriate environment for documenting by installing all the necessary tools. To do so we have provided you an environment droplet, which is a recipe for a series of installations that create the aforementioned environment. For that, after directing to the root folder of this project where the environment droplet ( environment.yml ) is located, you need to run the following command: conda env create -f environment.yml Start Work on Documentation After finishing your work on documentation you need to shutdown the server and deactivate the environment. Activate the Environment Now that you have created the appropriate environment, you need to activate the environment to be able to work inside it. For that, as you are in the root folder of this project, you need to run the following command: conda activate spatial_computing_docs If the command line is now indicating the name of the environment in parenthesis, it means that the environment is activated. Similar to this ( spatial_computing_docs ) { your username } @ { your computer name } spatial_computing_project_template % Run the Local Server Now that the environment is activated, we need to run the local server to be able to see the result of changes in the local version of the documentation website. For that, run the following command: mkdocs serve After running this command, if the server has started to work successfully, you should see the following line in the command line: INFO - Serving on http://127.0.0.1:8000 This means that the server is accessible at http://127.0.0.1:8000 . If you open your browser and go this link you should see a local version of the site. Writing Your Documentation In the documenting process you need to head to the docs folder and edit the .md (markdown) files, since the website is build from these files. In the root of this project, you can edit the configurations of your project in mkdocs.yml file: Adding o removing pages Add markdown extensions . Some of the useful extensions: arithmatex for writing mathematics highlight for code highlighting Customizing the looks of your documentation Adding MkDocs Plugins , such as: mknotebooks for including python notebooks in the documentations Finish Work on Documentation Server Shut Down To shutdown the server, you need to press Ctrl + C in the command line. The following should appear in the command line: INFO - Shutting down... Deactivate Environment After shutting down your server the command line is back to the normal state and you can run commands again. To deactivate your environment you need to run the following command: conda deactivate Deployment of the Documentation Site Build and Deploy to deploy your documentation website, you need to run the following command in the root of this repository: mkdocs gh-deploy This command will create a new branch in your repository called gh-pages and build your site in it. It will then push the new branch to your remote repository automatically. It will also create a site folder in your root directory containing all of your site files. Since this folder is added .gitignore file, it won't be committed or pushed to the remote repository. Setup GitHub Pages For the first time, you need to configure the GitHub Pages service on your GitHub repository so it wil automatically build your documentation website whenever you deploy your site. To do this: Go to your repository setting, got GitHub Pages section, select gh-pages branch, select /(root) location, click on the save button. The setting page will refresh, and now if you go to the address that is provided at the GitHub Pages section, Wola, here is your documentation!","title":"Instructions"},{"location":"documenting/instructions/#documenting-instructions","text":"","title":"Documenting Instructions"},{"location":"documenting/instructions/#installation","text":"","title":"Installation"},{"location":"documenting/instructions/#install-conda","text":"You can install Anaconda or Miniconda to install conda package manager (if you don't know the difference you should install anaconda).","title":"Install Conda"},{"location":"documenting/instructions/#create-documentation-environment","text":"Now we need to create the appropriate environment for documenting by installing all the necessary tools. To do so we have provided you an environment droplet, which is a recipe for a series of installations that create the aforementioned environment. For that, after directing to the root folder of this project where the environment droplet ( environment.yml ) is located, you need to run the following command: conda env create -f environment.yml","title":"Create documentation environment"},{"location":"documenting/instructions/#start-work-on-documentation","text":"After finishing your work on documentation you need to shutdown the server and deactivate the environment.","title":"Start Work on Documentation"},{"location":"documenting/instructions/#activate-the-environment","text":"Now that you have created the appropriate environment, you need to activate the environment to be able to work inside it. For that, as you are in the root folder of this project, you need to run the following command: conda activate spatial_computing_docs If the command line is now indicating the name of the environment in parenthesis, it means that the environment is activated. Similar to this ( spatial_computing_docs ) { your username } @ { your computer name } spatial_computing_project_template %","title":"Activate the Environment"},{"location":"documenting/instructions/#run-the-local-server","text":"Now that the environment is activated, we need to run the local server to be able to see the result of changes in the local version of the documentation website. For that, run the following command: mkdocs serve After running this command, if the server has started to work successfully, you should see the following line in the command line: INFO - Serving on http://127.0.0.1:8000 This means that the server is accessible at http://127.0.0.1:8000 . If you open your browser and go this link you should see a local version of the site.","title":"Run the Local Server"},{"location":"documenting/instructions/#writing-your-documentation","text":"In the documenting process you need to head to the docs folder and edit the .md (markdown) files, since the website is build from these files. In the root of this project, you can edit the configurations of your project in mkdocs.yml file: Adding o removing pages Add markdown extensions . Some of the useful extensions: arithmatex for writing mathematics highlight for code highlighting Customizing the looks of your documentation Adding MkDocs Plugins , such as: mknotebooks for including python notebooks in the documentations","title":"Writing Your Documentation"},{"location":"documenting/instructions/#finish-work-on-documentation","text":"","title":"Finish Work on Documentation"},{"location":"documenting/instructions/#server-shut-down","text":"To shutdown the server, you need to press Ctrl + C in the command line. The following should appear in the command line: INFO - Shutting down...","title":"Server Shut Down"},{"location":"documenting/instructions/#deactivate-environment","text":"After shutting down your server the command line is back to the normal state and you can run commands again. To deactivate your environment you need to run the following command: conda deactivate","title":"Deactivate Environment"},{"location":"documenting/instructions/#deployment-of-the-documentation-site","text":"","title":"Deployment of the Documentation Site"},{"location":"documenting/instructions/#build-and-deploy","text":"to deploy your documentation website, you need to run the following command in the root of this repository: mkdocs gh-deploy This command will create a new branch in your repository called gh-pages and build your site in it. It will then push the new branch to your remote repository automatically. It will also create a site folder in your root directory containing all of your site files. Since this folder is added .gitignore file, it won't be committed or pushed to the remote repository.","title":"Build and Deploy"},{"location":"documenting/instructions/#setup-github-pages","text":"For the first time, you need to configure the GitHub Pages service on your GitHub repository so it wil automatically build your documentation website whenever you deploy your site. To do this: Go to your repository setting, got GitHub Pages section, select gh-pages branch, select /(root) location, click on the save button. The setting page will refresh, and now if you go to the address that is provided at the GitHub Pages section, Wola, here is your documentation!","title":"Setup GitHub Pages"}]}